name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"

          # Extract the changelog section for this version
          awk '/## \['$VERSION'\]/{flag=1; next} /## \[/{flag=0} flag' CHANGELOG.md > release_notes.md

          # If no specific notes found, use a generic message
          if [ ! -s release_notes.md ]; then
            echo "Release version $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/master/CHANGELOG.md) for details." >> release_notes.md
          fi

          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            LICENSE
            README.md
            CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release zip
        run: |
          cd custom_components
          zip -r ../nordpool-${{ steps.get_version.outputs.version }}.zip nordpool/
          cd ..

      - name: Upload release zip
        uses: softprops/action-gh-release@v1
        with:
          files: nordpool-${{ steps.get_version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update HACS repository
        run: |
          echo "Release ${{ steps.get_version.outputs.tag }} created successfully"
          echo "HACS will automatically detect this release"
